// File: classic_fsm_v2.v
// Generated by MyHDL 0.11
// Date: Tue Nov 24 23:03:35 2020


`timescale 1ns/10ps

module classic_fsm_v2 (
    clk_i,
    inputs_i,
    outputs_o
);


input clk_i;
input [1:0] inputs_i;
output [3:0] outputs_o;
reg [3:0] outputs_o;

reg [1:0] fsm_state;
reg [1:0] prev_inputs;
wire [1:0] input_chgs;
reg [1:0] reset_cnt;




assign input_chgs = (inputs_i & (~prev_inputs));


always @(posedge clk_i) begin: CLASSIC_FSM_V2_LOC_INSTS_CHUNK_INSTS_1
    if (($signed({1'b0, reset_cnt}) < (4 - 1))) begin
        reset_cnt <= (reset_cnt + 1);
        fsm_state <= 2'b00;
    end
    else if ((fsm_state == 2'b00)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b01;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b11;
        end
    end
    else if ((fsm_state == 2'b01)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b10;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b00;
        end
    end
    else if ((fsm_state == 2'b10)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b11;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b01;
        end
    end
    else if ((fsm_state == 2'b11)) begin
        if (input_chgs[0]) begin
            fsm_state <= 2'b00;
        end
        else if (input_chgs[1]) begin
            fsm_state <= 2'b10;
        end
    end
    else begin
        fsm_state <= 2'b00;
    end
    prev_inputs <= inputs_i;
end


always @(fsm_state) begin: CLASSIC_FSM_V2_LOC_INSTS_CHUNK_INSTS_K_C
    case (fsm_state)
        2'b00: begin
            outputs_o = 1;
        end
        2'b01: begin
            outputs_o = 2;
        end
        2'b10: begin
            outputs_o = 4;
        end
        2'b11: begin
            outputs_o = 8;
        end
        default: begin
            outputs_o = 15;
        end
    endcase
end

endmodule
